{
  "name": "wavesurfer.js",
  "version": "0.1.6",
  "description": "Interactive navigable audio visualization using Web Audio and Canvas",
  "main": "build/wavesurfer.cjs.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "prepublish": "make cjs",
    "update": "make cjs"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/katspaugh/wavesurfer.js.git"
  },
  "author": "",
  "license": "CC-BY 3.0",
  "bugs": {
    "url": "https://github.com/katspaugh/wavesurfer.js/issues"
  },
  "homepage": "https://github.com/katspaugh/wavesurfer.js",
  "readme": "wavesurfer.js\n=============\n\nInteractive navigable audio visualization using\n[Web Audio](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html)\nand Canvas.\n\n![Imgur](http://i.imgur.com/dnH8q.png)\n\nAPI in examples\n===============\n\nCreate an instance:\n\n    var wavesurfer = Object.create(WaveSurfer);\n\nInitialize it with a container element (plus some options):\n\n    wavesurfer.init({ container: '#wave', waveColor: 'violet',\n        progressColor: 'purple' });\n\nSubscribe to some events:\n\n    wavesurfer.on('ready', function () { wavesurfer.play(); });\n\nLoad an audio file from a URL:\n\n    wavesurfer.load('example/media/demo.wav');\n\nSee the example code\n[here](https://github.com/katspaugh/wavesurfer.js/blob/master/example/main.js).\n\nOptions\n=======\n\n  * `container` – CSS-selector or HTML-element where the waveform\n    should be drawn. This is the only required parameter.\n  * `height` – the height of the waveform. `128` by default.\n  * `skipLength` – number of seconds to skip with the `skipForward()`\n    and `skipBackward()` methods (`2` by default).\n  * `minPxPerSec` – minimum number of pixels per second of audio (`1`\n    by default).\n  * `fillParent` – whether to fill the entire container or draw only\n    according to `minPxPerSec` (`true` by default).\n  * `scrollParent` – whether to scroll the container with a lengthy\n    waveform. Otherwise the waveform is shrinked to container width\n    (see `fillParent`).\n  * `normalize` – if `true`, normalize by the maximum peak instead of\n    1.0 (`false` by default).\n  * `pixelRatio` – equals `window.devicePixelRatio` by default, but\n    you can set it to `1` for faster rendering.\n  * `audioContext` – use your own previously initialized\n    `AudioContext` or leave blank.\n  * `cursorWidth` – 1 px by default.\n  * `markerWidth` – 1 px by default.\n  * `waveColor` – the fill color of the waveform after the cursor.\n  * `progressColor` – the fill color of the part of the waveform\n    behind the cursor.\n  * `cursorColor` – the fill color of the cursor indicating the\n    playhead position.\n  * `dragSelection` – enable drag selection (`true` by default).\n  * `loopSelection` – whether playback should loop inside the selected\n  region (`true` by default). Has no effect if `dragSelection` is\n  `false`.\n  * `interact` – whether the mouse interaction will enabled at\n    initialisation (`true` by default).\n\nMethods\n=======\n\nAll methods are intentionally public, but the most readily available\nare the following:\n\n * `init(params)` – initializes with the options listed above.\n * `on(eventName, callback)` – subscribes to an event.\n * `load(url)` – loads an audio from URL via XHR. Returns XHR object.\n * `getDuration()` – returns the duration of an audio clip in seconds.\n * `getCurrentTime()` – returns current progress in seconds.\n * `play()` – starts playback from the current position.\n * `pause()` – stops playback.\n * `playPause()` – plays if paused, pauses if playing.\n * `stop()` – stops and goes to the beginning.\n * `skipForward()`\n * `skipBackward()`\n * `skip(offset)` – skips a number of seconds from the current\n   position (use a negative value to go backwards).\n * `setVolume(newVolume)` – sets the playback volume to a new value\n   (use a floating point value between 0 and 1, 0 being no volume and\n   1 being full volume).\n * `toggleMute()` – toggles the volume on and off.\n * `mark(options)` – creates a visual marker on the waveform. Options\n   are `id` (random if not set), `position` (in seconds), `color` and\n   `width` (defaults to the global option `markerWidth`). Returns a\n   marker object which you can update later\n   (`marker.update(options)`).\n * `clearMarks()` – removes all markers.\n * `empty()` – clears the waveform as if a zero-length audio is\n   loaded.\n * `destroy()` – removes events, elements and disconnects Web Audio\n   nodes.\n * `toggleLoopSelection()` – toggles whether playback should loop\n inside the selection.\n * `getSelection()` – returns an object representing the current\n selection. This object will have the following keys:\n `startPercentage` (float between 0 and 1), `startPosition` (in\n seconds), `endPercentage` (float between 0 and 1) and `endPosition`\n (in seconds). Returns `null` if no selection is present.\n * `updateSelection({ startPercentage, endPercentage })` – create or\n   update a visual selection.\n * `enableInteraction()` – Enable mouse interaction\n * `disableInteraction()` – Disable mouse interaction\n * `toggleInteraction()` – Toggle mouse interaction\n * `setPlaybackRate(rate)` – sets the speed of playback (`0.5` is half\n   normal speed, `2` is double speed and so on).\n\nConnecting filters\n==================\n\nYou can insert your own Web Audio nodes into the graph using the\nmethod `setFilter`. Example:\n\n    var lowpass = wavesurfer.backend.ac.createBiquadFilter();\n    wavesurfer.backend.setFilter(lowpass);\n\nEvents\n======\n\nYou can listen to the following events:\n\n * `ready` – when audio is loaded, decoded and the waveform drawn.\n * `loading` – fires continuously when loading via XHR or\n   drag'n'drop. Callback recieves loading progress in percents (from 0\n   to 100) and the event target.\n * `seek` – on seeking.\n * `play` – when it starts playing.\n * `finish` – when it finishes playing.\n * `progress` – fires continuously during playback.\n * `mark` – when a mark is reached. Passes the mark object.\n * `error` – on error, passes an error message.\n\nEach of mark objects also fire the event `reached` when played over.\n\nCredits\n=======\n\nInitial idea by [Alex Khokhulin](https://github.com/xoxulin). Many\nthanks to\n[the awesome contributors](https://github.com/katspaugh/wavesurfer.js/contributors)!\n\nLicense\n=======\n\n![cc-by](http://i.creativecommons.org/l/by/3.0/88x31.png)\n\nThis work is licensed under a\n[Creative Commons Attribution 3.0 Unported License](http://creativecommons.org/licenses/by/3.0/deed.en_US).\n",
  "readmeFilename": "README.md",
  "_id": "wavesurfer.js@0.1.6",
  "dist": {
    "shasum": "71f9cc32268110d4cb31915f6ad1c81442ef30db"
  },
  "_from": "wavesurfer.js@~0.1",
  "_resolved": "https://registry.npmjs.org/wavesurfer.js/-/wavesurfer.js-0.1.6.tgz"
}
